FATAL EXCEPTION: main
                                                                                                    Process: com.example.sensors_app, PID: 18850
                                                                                                    java.lang.RuntimeException: Unable to stop service com.example.sensors_app.CameraService@fccc951: java.lang.NullPointerException: Attempt to invoke virtual method 'void android.hardware.Camera.stopPreview()' on a null object reference
                                                                                                    	at android.app.ActivityThread.handleStopService(ActivityThread.java:5318)
                                                                                                    	at android.app.ActivityThread.-$$Nest$mhandleStopService(Unknown Source:0)
                                                                                                    	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2539)
                                                                                                    	at android.os.Handler.dispatchMessage




  package com.example.sensors_app;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.WindowManager;
import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;

public class CameraService extends Service {
    private static final String TAG = "SensorReceiver";

    private static final String CHANNEL_ID = "CameraServiceChannel";
    private Camera camera;
    private WindowManager windowManager;
    private View cameraPreviewView;
    private Handler handler = new Handler();
    private Runnable stopRunnable;


    @Override
    public void onCreate() {
        super.onCreate();
        createNotificationChannel();



        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        cameraPreviewView = LayoutInflater.from(this).inflate(R.layout.camera_preview, null);

        SurfaceView surfaceView = cameraPreviewView.findViewById(R.id.cameraSurfaceView);
        SurfaceHolder holder = surfaceView.getHolder();
        holder.addCallback(new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(@NonNull SurfaceHolder holder) {
                camera = Camera.open();
                try {
                    camera.setPreviewDisplay(holder);
                    camera.setDisplayOrientation(90);
                    camera.startPreview();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void surfaceChanged(@NonNull SurfaceHolder holder, int format, int width, int height) {

                try {
                    camera.setPreviewDisplay(holder);
                    camera.startPreview();
                } catch (Exception e) {
                }
            }

            @Override
            public void surfaceDestroyed(@NonNull SurfaceHolder holder) {
                if (camera != null) {
                    camera.stopPreview();
                    camera.release();
                }
            }

        });

        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT,
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY : WindowManager.LayoutParams.TYPE_PHONE,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                android.graphics.PixelFormat.TRANSLUCENT
        );
        params.gravity = Gravity.TOP | Gravity.LEFT;
        windowManager.addView(cameraPreviewView, params);

        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Camera Service")
                .setContentText("Camera is running")
                .build();
        startForeground(1, notification);
//        Log.d(TAG, "Camera service started inside camera service on create " );

    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        int duration = intent.getIntExtra("DURATION", 0);
        scheduleStop(duration);
//        Log.d(TAG, "Camera service started inside on start command " );

        return START_NOT_STICKY;
    }

    private void scheduleStop(int duration) {
        if (stopRunnable != null) {
            handler.removeCallbacks(stopRunnable);
        }
        stopRunnable = () -> stopSelf();
        handler.postDelayed(stopRunnable, duration * 1000); // Convert duration to milliseconds
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

            releaseCameraAndPreview();

//            camera.stopPreview();
//            camera.release();
    }

    private void releaseCameraAndPreview() {

            camera.stopPreview();
            camera.release();
            windowManager.removeView(cameraPreviewView);

    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Camera Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }
}
