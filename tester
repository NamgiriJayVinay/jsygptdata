package com.example.sensors_app_seoulbites;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;

import androidx.core.app.NotificationCompat;

public class PhoneService extends Service {

    private static final String TAG = "PhoneService";
    public static final String CHANNEL_ID = "PhoneServiceChannel";

    private TelephonyManager telephonyManager;
    private PhoneStateListener phoneStateListener;
    private Handler handler = new Handler();
    private Runnable stopRunnable;

    private WindowManager windowManager;
    private View phonePreviewView;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, "PhoneService Created");

        // Start the service in the foreground with a notification
        createNotificationChannel();

        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        phonePreviewView = LayoutInflater.from(this).inflate(R.layout.phone_preview, null);

        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT,
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY : WindowManager.LayoutParams.TYPE_PHONE,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                android.graphics.PixelFormat.TRANSLUCENT
        );
        int marginTop = 600;
        params.y = marginTop;
        params.gravity = Gravity.TOP | Gravity.LEFT;
        windowManager.addView(phonePreviewView, params);



        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Phone Service Running")
                .setContentText("Monitoring phone call state in the background")
                .setSmallIcon(android.R.drawable.sym_call_outgoing)
                .build();

        startForeground(6, notification);

        // Initialize the TelephonyManager and PhoneStateListener
        telephonyManager = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);

        phoneStateListener = new PhoneStateListener() {
            @Override
            public void onCallStateChanged(int state, String phoneNumber) {
                super.onCallStateChanged(state, phoneNumber);

                switch (state) {
                    case TelephonyManager.CALL_STATE_RINGING:
                        Log.d(TAG, "Phone is ringing. Incoming number: " + phoneNumber);
                        break;
                    case TelephonyManager.CALL_STATE_OFFHOOK:
                        Log.d(TAG, "Call is active.");
                        break;
                    case TelephonyManager.CALL_STATE_IDLE:
                        Log.d(TAG, "Phone is idle.");
                        break;
                }
            }
        };

        // Register the listener
        telephonyManager.listen(phoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "PhoneService Started");

        // Get duration from intent and schedule service stop
        int duration = intent.getIntExtra("DURATION", 0);
        scheduleStop(duration);

        return START_NOT_STICKY;
    }

    private void scheduleStop(int duration) {
        if (stopRunnable != null) {
            handler.removeCallbacks(stopRunnable);
        }
        stopRunnable = () -> stopSelf();
        handler.postDelayed(stopRunnable, duration * 1000); // Convert duration to milliseconds
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "PhoneService Destroyed");

        // Unregister the PhoneStateListener when the service is destroyed
        if (telephonyManager != null) {
            windowManager.removeView(phonePreviewView);

            telephonyManager.listen(phoneStateListener, PhoneStateListener.LISTEN_NONE);
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Phone Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }
}




package com.example.sensors_app_seoulbites;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import androidx.core.app.NotificationCompat;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

public class GalleryService extends Service {

    private static final String CHANNEL_ID = "PhotoVideoServiceChannel";
    private static final String TAG = "PhotoVideoService";
    private WindowManager windowManager;
    private View mediaPreviewView;
    private Handler handler = new Handler();
    private Runnable stopRunnable;
    private List<MediaItem> mediaItems = new ArrayList<>();
    private int currentMediaIndex = 0;
    private ImageView previewImageView;

    private static class MediaItem {
        Uri uri;
        boolean isVideo;

        MediaItem(Uri uri, boolean isVideo) {
            this.uri = uri;
            this.isVideo = isVideo;
        }
    }

    @Override
    public void onCreate() {
        super.onCreate();
        createNotificationChannel();

        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        mediaPreviewView = LayoutInflater.from(this).inflate(R.layout.gallery_preview, null);

        previewImageView = mediaPreviewView.findViewById(R.id.galleryPreviewImageView);

        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT,
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY : WindowManager.LayoutParams.TYPE_PHONE,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                android.graphics.PixelFormat.TRANSLUCENT
        );
        int marginTop = 360;
        params.y = marginTop;
        params.gravity = Gravity.TOP | Gravity.LEFT;
        windowManager.addView(mediaPreviewView, params);

        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Photo/Video Service")
                .setContentText("Photo/Video access is running")
                .build();
        startForeground(4, notification);

        // Start accessing media
        handler.post(mediaAccessRunnable);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        int duration = intent.getIntExtra("DURATION", 0);
        scheduleStop(duration);
        return START_NOT_STICKY;
    }

    private void scheduleStop(int duration) {
        if (stopRunnable != null) {
            handler.removeCallbacks(stopRunnable);
        }
        stopRunnable = () -> stopSelf();
        handler.postDelayed(stopRunnable, duration * 1000);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mediaPreviewView != null) {
            windowManager.removeView(mediaPreviewView);
        }
        handler.removeCallbacks(mediaAccessRunnable);
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Photo/Video Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            if (manager != null) {
                manager.createNotificationChannel(serviceChannel);
            }
        }
    }

    private void loadMediaItems() {
        ContentResolver contentResolver = getContentResolver();
        Uri imageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
        Uri videoUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;

        String[] projection = {MediaStore.MediaColumns._ID};

        // Query for images
        Cursor imageCursor = contentResolver.query(imageUri, projection, null, null, null);
        if (imageCursor != null) {
            while (imageCursor.moveToNext()) {
                long id = imageCursor.getLong(imageCursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID));
                Uri contentUri = Uri.withAppendedPath(imageUri, String.valueOf(id));
                mediaItems.add(new MediaItem(contentUri, false));
            }
            imageCursor.close();
        }

        // Query for videos
        Cursor videoCursor = contentResolver.query(videoUri, projection, null, null, null);
        if (videoCursor != null) {
            while (videoCursor.moveToNext()) {
                long id = videoCursor.getLong(videoCursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID));
                Uri contentUri = Uri.withAppendedPath(videoUri, String.valueOf(id));
                mediaItems.add(new MediaItem(contentUri, true));
            }
            videoCursor.close();
        }
    }

    private void accessAndDisplayMedia() {
        if (mediaItems.isEmpty()) {
            loadMediaItems();
        }

        if (!mediaItems.isEmpty()) {
            MediaItem mediaItem = mediaItems.get(currentMediaIndex);
            try {
                if (mediaItem.isVideo) {
                    MediaMetadataRetriever retriever = new MediaMetadataRetriever();
                    retriever.setDataSource(this, mediaItem.uri);
                    Bitmap bitmap = retriever.getFrameAtTime();
                    previewImageView.setImageBitmap(bitmap);
                    retriever.release();
                } else {
                    InputStream is = getContentResolver().openInputStream(mediaItem.uri);
                    Bitmap bitmap = BitmapFactory.decodeStream(is);
                    previewImageView.setImageBitmap(bitmap);
                }
                Log.d(TAG, "Accessed media: " + mediaItem.uri + (mediaItem.isVideo ? " (video)" : " (image)"));
            } catch (IOException e) {
                Log.e(TAG, "Error accessing media: " + e.getMessage());
            }
            currentMediaIndex = (currentMediaIndex + 1) % mediaItems.size();
        }
    }

    private Runnable mediaAccessRunnable = new Runnable() {
        @Override
        public void run() {
            accessAndDisplayMedia();
            handler.postDelayed(this, 5000); // Access media every 5 seconds
        }
    };
}
